{"version":3,"sources":["compoents/info.js","compoents/form.js","compoents/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","className","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","_callee","event","api_url","data","date","sunset_date","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","sys","Date","setTime","getHours","getMinutes","getSeconds","_this","setState","main","stop","info","compoents_form","this","weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRASeA,EAPF,kBACTC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,mCCIOC,EAPF,SAACC,GAAD,OACTJ,EAAAC,EAAAC,cAAA,QAAMG,SAAYD,EAAME,YACpBN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,oBAC3CT,EAAAC,EAAAC,cAAA,+BCWOQ,EAdC,SAAAN,GAAK,OACbJ,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACTP,EAAMQ,MACRZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBAAcE,EAAMQ,KAApB,KAA4BR,EAAMS,SAClCb,EAAAC,EAAAC,cAAA,yBAAiBE,EAAMU,MACvBd,EAAAC,EAAAC,cAAA,sBAAcE,EAAMW,UACpBf,EAAAC,EAAAC,cAAA,oBAAYE,EAAMY,SAGtBhB,EAAAC,EAAAC,cAAA,KAAGS,UAAU,SAAUP,EAAMa,SCPnCC,EAAU,mCA6EDC,6MAzEXC,MAAQ,CACJN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,KAGXC,qDAAiB,SAAAC,EAAOC,GAAP,IAAAZ,EAAAa,EAAAC,EAAAV,EAAAW,EAAAC,EAAA,OAAAC,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACbT,EAAMU,mBAEAtB,EAAOY,EAAMW,OAAOC,SAASxB,KAAKyB,OAH3B,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAMaK,MAAK,oDAAAC,OAAqD3B,EAArD,WAAA2B,OAAmErB,EAAnE,kBANlB,cAMHO,EANGM,EAAAS,KAAAT,EAAAE,KAAA,EAOUR,EAAQgB,OAPlB,OAOHf,EAPGK,EAAAS,KAQTE,QAAQC,IAAIjB,GAERV,EAASU,EAAKkB,IAAI5B,QAClBW,EAAO,IAAIkB,MACVC,QAAQ9B,GACTY,EAAcD,EAAKoB,WAAa,IAAMpB,EAAKqB,aAAe,IAAMrB,EAAKsB,aAEzEC,EAAKC,SAAS,CACVrC,KAAMY,EAAK0B,KAAKtC,KAChBF,KAAMc,EAAKlB,KACXK,QAASa,EAAKkB,IAAI/B,QAClBE,SAAUW,EAAK0B,KAAKrC,SACpBC,OAAQY,EACRX,WAAOI,IArBFU,EAAAE,KAAA,iBAwBTiB,EAAKC,SAAS,CACVrC,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,6BA9BF,yBAAAc,EAAAsB,SAAA9B,oIAqCb,OACEvB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,WACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iBACXX,EAAAC,EAAAC,cAACoD,EAAD,OAEJtD,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iBACXX,EAAAC,EAAAC,cAACqD,EAAD,CAAMjD,WAAckD,KAAKlC,iBACzBtB,EAAAC,EAAAC,cAACuD,EAAD,CACI3C,KAAQ0C,KAAKpC,MAAMN,KACnBF,KAAQ4C,KAAKpC,MAAMR,KACnBC,QAAW2C,KAAKpC,MAAMP,QACtBE,SAAYyC,KAAKpC,MAAML,SACvBC,OAAUwC,KAAKpC,MAAMJ,OACrBC,MAASuC,KAAKpC,MAAMH,oBAhEpCyC,IAAMC,uBCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ebd8473c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>Weather App</h2>\r\n        <p>Weather in Your city</p>\r\n    </div>\r\n);\r\n\r\nexport default Info;","import React from 'react';\r\n\r\nconst Form = (props) => (\r\n    <form onSubmit = {props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Enter city name\"/>\r\n        <button>Get Weather</button>\r\n    </form>\r\n)\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n        <div className='infoWeath'>\r\n            { props.city &&\r\n            <div>\r\n                <p>Position: {props.city}, {props.country}</p>\r\n                <p>Temperature: {props.temp}</p>\r\n                <p>Pressure: {props.pressure}</p>\r\n                <p>Sunset: {props.sunset}</p>\r\n            </div>\r\n            }\r\n            <p className='error'>{ props.error }</p>\r\n        </div>\r\n);\r\n\r\nexport default Weather;","import React from 'react';\nimport Info from './compoents/info';\nimport Form from './compoents/form';\nimport Weather from './compoents/weather';\n\nconst API_KEY = 'd0506592bdc0b24fa1263b8464673a02';\n\nclass App extends React.Component {\n\n    state = {\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: undefined\n    };\n\n    gettingWeather = async (event) => {\n        event.preventDefault();\n\n        const city = event.target.elements.city.value;\n\n        if (city) {\n            const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n            const data = await api_url.json();\n            console.log(data);\n\n            let sunset = data.sys.sunset;\n            let date = new Date();\n            date.setTime(sunset);\n            let sunset_date = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n\n            this.setState({\n                temp: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                pressure: data.main.pressure,\n                sunset: sunset_date,\n                error: undefined\n            });\n        } else {\n            this.setState({\n                temp: undefined,\n                city: undefined,\n                country: undefined,\n                pressure: undefined,\n                sunset: undefined,\n                error: 'Please! Enter city name!'\n            });\n        }\n\n    };\n\n    render(){\n        return(\n          <div className='wrapper'>\n              <div className=\"main\">\n                  <div className=\"container\">\n                      <div className=\"row\">\n                          <div className='col-sm-5 info'>\n                              <Info />\n                          </div>\n                          <div className='col-sm-7 form'>\n                              <Form getWeather = {this.gettingWeather}/>\n                              <Weather\n                                  temp = {this.state.temp}\n                                  city = {this.state.city}\n                                  country = {this.state.country}\n                                  pressure = {this.state.pressure}\n                                  sunset = {this.state.sunset}\n                                  error = {this.state.error}\n                              />\n                          </div>\n                      </div>\n                  </div>\n              </div>\n          </div>\n        );\n    }\n}\n\nexport default App;\n\n\n\n// import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n//\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n//\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}